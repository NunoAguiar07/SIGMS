openapi: 3.1.0
info:
  title: SIGMS
  description: The OpenAPI specification for the SIGMS
  version: 1.0.0
servers:
  - url: 'https://localhost:8080'
tags:
  - name: API
    description: General API information
  - name: AssessRole
    description: Pending account approval operations
  - name: Auth
    description: Authentication operations
  - name: Lecture
    description: Lecture operations
  - name: Profile
    description: Profile operations
  - name: Room
    description: Room operations
  - name: Schedule
    description: Schedule operations
  - name: Subject
    description: Subject operations
paths:
  /api:
    get:
      tags:
        - API
      description: API Welcome page
      responses:
        200:
          description: API information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WelcomePageResponse"
  /api/verifyAccount:
    post:
      tags:
        - AssessRole
      security:
        - bearerJWT: [ ]
      description: Verify account ownership on creation
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: The onetime token for account verification
      responses:
        204:
          description: Successfully verified account
  /api/assessRole:
    get:
      tags:
        - AssessRole
      security:
        - bearerJWT: []
      description: Return pending approvals
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          required: false
          description: Item return list offset
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
          description: Item return list limit
      responses:
        200:
          description: Pending approvals as AssessRoleResponses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssessRole"
        400:
          description: Either limit or offset are not a valid integer
    put:
      tags:
        - AssessRole
      security:
        - bearerJWT: []
      description: Approve/reject a pending user
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
            example: "UUID Token"
          description: The token of the to be approved/rejected user
        - in: query
          name: status
          required: true
          schema:
            type: string
            enum:
              - approved
              - rejected
          description: To be set status of the pending user
      responses:
        204:
          description: Successfully set new pending user approval request status
  /api/assessRole/{token}:
    get:
      tags:
        - AssessRole
      security:
        - bearerJWT: []
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: The token of the pending approval request
      description: "Retrieve the pending approval by token"
      responses:
        200:
          description: Successfully retrieved the pending approval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessRole"
        401:
          description: Token not found
  /api/lectures:
    get:
      tags:
        - Lecture
      security:
        - bearerJWT: []
      description: Return pending approvals
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          required: false
          description: Item return list offset
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
          description: Item return list limit
      responses:
        200:
          description: Successfully retrieved lectures
          content:
            application:/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LectureResponse"
    post:
      tags:
        - Lecture
      security:
        - bearerJWT: []
      description: Create a new lecture
      requestBody:
        $ref: "#/components/schemas/LectureRequest"
      responses:
        201:
          description: Successfully created a new lecture
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LectureResponse"
    put:
      tags:
        - Lecture
      security:
        - bearerJWT: []
      description: Update an existing lecture
      requestBody:
        $ref: "#/components/schemas/UpdateLectureRequest"
      responses:
        200:
          description: Successfully updated the lecture
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LectureResponse"
    delete:
      tags:
        - Lecture
      security:
        - bearerJWT: []
      description: Delete an existing lecture
      requestBody:
        $ref: "#/components/schemas/LectureRequest"
      responses:
        204:
          description: Successfully deleted the lecture
  /api/profile:
    get:
      security:
        - bearerJWT: []
      tags:
        - Profile
      description: Return user information from account token in authentication
      responses:
        200:
          description: Return the user object with basic informations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      security:
        - bearerJWT: []
      tags:
        - Profile
      requestBody:
        $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        200:
          description: Successfully updated user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/profile/password:
    post:
      security:
        - bearerJWT: []
      tags:
        - Profile
      requestBody:
        $ref: "#/components/schemas/ChangePassword"
      description: Update user credentials
      responses:
        200:
          description: Successfully updated user credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /rooms:
    get:
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          required: false
          description: Item return list offset
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
          description: Item return list limit
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      responses:
        200:
          description: Successfully retrieved rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoomResponse"
    post:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      requestBody:
        $ref: "#/components/schemas/RoomRequest"
      description: Add a new room
      responses:
        201:
          description: Successfully created a new room
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomResponse"
  /rooms/{roomId}:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
      description: Obtain room by Id
      responses:
        200:
          description: Successfully retrieved room by Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomResponse"
    delete:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
      description: Delete room by Id
      responses:
        204:
          description: Successfully deleted room by Id
    put:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
      requestBody:
        $ref: "#/components/schemas/RoomRequest"
      description: Update room by Id
      responses:
        200:
          description: Successfully updated room by Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomResponse"
  /rooms/{roomId}/lectures:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          required: false
          description: Item return list offset
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
          description: Item return list limit
      description: Retrieve room associated lectures
      responses:
        200:
          description: Successfully retrieved room associated lectures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LectureResponse"
  /rooms/{roomId}/issues:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          required: false
          description: Item return list offset
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
          description: Item return list limit
      description: Retrieve room associated issues
      responses:
        200:
          description: Successfully retrieved room associated issues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IssueReportResponse"
    post:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
      description: Create a new issue report for room of Id
      requestBody:
        $ref: "#/components/schemas/IssueReportRequest"
      responses:
        201:
          description: Successfully created a new issue report for room of Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueReportResponse"

  /rooms/{roomId}/issues/{issueId}:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
        - in: path
          name: issueId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the issue to be obtained
      description: Retrieve issue by Id associated with room of Id
      responses:
        200:
          description: Successfully retrieved issue by Id associated with room of Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueReportResponse"
    delete:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
        - in: path
          name: issueId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the issue to be deleted
      description: Delete issue by Id associated with room of Id
      responses:
        204:
          description: Successfully deleted issue by Id associated with room of Id
    put:
      security:
        - bearerJWT: [ ]
      tags:
        - Room
      parameters:
        - in: path
          name: roomId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the room to be obtained
        - in: path
          name: issueId
          schema:
            type: integer
            example: 1
          required: true
          description: The id of the issue to be updated
      description: Update issue by Id associated with room of Id
      requestBody:
        $ref: "#/components/schemas/IssueReportRequest"
      responses:
        200:
          description: Successfully updated issue by Id associated with room of Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueReportResponse"
  /api/schedule:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Schedule
      description: Retrieve authenticated user related schedule
      responses:
        200:
          description: Successfully retrieved authenticated user realted schedule
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleResponse"
  /api/subjects:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          required: false
          description: Item return list offset
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
          description: Item return list limit
      description: Retrieve all subjects from offset within limit
      responses:
        200:
          description: Successfully retrieved all subjects from offset within limit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubjectResponse"
    post:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      requestBody:
        $ref: "#/components/schemas/SubjectRequest"
      description: Create a new subject
      responses:
        201:
          description: Successfully created a new subject
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectResponse"
  /api/subject/{subjectId}:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema:
            type: integer
            example: 1
      description: Retrieve subject by Id
      responses:
        200:
          description: Successfully retrieved subject by Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectResponse"
    delete:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema:
            type: integer
            example: 1
      description: Delete subject by Id
      responses:
        204:
          description: Successfully deleted subject by Id
  /api/subject/{subjectId}/classes:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema:
            type: integer
            example: 1
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          required: false
          description: Item return list offset
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
          description: Item return list limit
      description: Retrieve classes of subject by Id
      responses:
        200:
          description: Successfully retrieved classes of subject by Id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClassResponse"
    post:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        $ref: "#/components/schemas/ClassRequest"
      description: Create a new class of subject by Id
      responses:
        201:
          description: Successfully created a new class of subject by Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassResponse"
  /api/subject/{subjectId}/classes/{classId}:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: classId
          required: true
          schema:
            type: integer
            example: 1
      description: Retrieve class by id for subject by id
      responses:
        200:
          description: Successfully retrieved class by id for subject by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassResponse"
  /api/subject/{subjectId}/classes/{classId}/users:
    post:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: classId
          required: true
          schema:
            type: integer
            example: 1
      description: Add authenticated user to class by id for subject by id
      responses:
        204:
          description: Successfully added authenticated user to class by id for subject by id
    delete:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: classId
          required: true
          schema:
            type: integer
            example: 1
      description: Remove authenticated user to class by id for subject by id
      responses:
        204:
          description: Successfully removed authenticated user to class by id for subject by id
  /api/subject/{subjectId}/classes/{classId}/lectures:
    get:
      security:
        - bearerJWT: [ ]
      tags:
        - Subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: classId
          required: true
          schema:
            type: integer
            example: 1
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          required: false
          description: Item return list offset
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
          description: Item return list limit
      description: Retrieve lectures of class by id of subject by id
      responses:
        200:
          description: Successfully retrieve lectures of class by id of subject by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LectureResponse"
  /auth/register:
    post:
      tags:
        - Auth
      requestBody:
        $ref: "#/components/schemas/UserCredentialsRequest"
      description: Register a new user
      responses:
        200:
          description: Successfully registered a new user and awaiting for email confirmation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
  /auth/login:
    post:
      tags:
        - Auth
      requestBody:
        $ref: "#/components/schemas/LoginCredentialsRequest"
      description: Login an user
      responses:
        200:
          description: Successfully logged in an user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /auth/verifyAccount:
    put:
      tags:
        - Auth
      parameters:
        - in: query
          name: token
          schema:
            type: string
            example: UUID token
      description: Verify a new student user
      responses:
        204:
          description: Successfully verified and registered a new user
components:
  schemas:
    ChangePassword:
      type: object
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          example: "thepasswordshouldcomehashed"
        newPassword:
          type: string
          example: "thepasswordshouldcomehashed"
    ClassRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "51D"
    IssueReportRequest:
      type: object
      required:
        - description
      properties:
        description:
         type: string
         example: "There is an issue with room X"
    LectureRequest:
      type: object
      required:
        - classId
        - roomId
        - type
        - weekDay
        - startTime
        - endTime
      properties:
        classId:
          type: integer
          example: 1
        roomId:
          type: integer
          example: 1
        type:
          $ref: "#/components/schemas/ClassType"
        weekDay:
          $ref: "#/components/schemas/WeekDay"
        startTime:
          type: string
          example: "11:00"
        endTime:
          type: string
          example: "13:00"
    UpdateLectureRequest:
      type: object
      properties:
        schoolClassId:
          type: integer
          example: 1
        roomId:
          type: integer
          example: 1
        type:
          $ref: "#/components/schemas/ClassType"
        weekDay:
          $ref: "#/components/schemas/WeekDay"
        startTime:
          type: string
          example: "11:00"
        endTime:
          type: string
          example: "13:00"
        newSchoolClassId:
          type: integer
          example: 1
        newRoomId:
          type: integer
          example: 1
        newType:
          $ref: "#/components/schemas/ClassType"
        newWeekDay:
          $ref: "#/components/schemas/WeekDay"
        newStartTime:
          type: string
          example: "11:00"
        newEndTime:
          type: string
          example: "13:00"
    LoginCredentialsRequest:
      type: object
      required:
        email:
          type: string
          example: "example@email.com"
        password:
          type: string
          example: "thepasswordshouldcomehashed"
    RoomRequest:
      type: object
      required:
        - name
        - capacity
        - type
      properties:
        name:
          type: string
          example: "F.0.23"
        capacity:
          type: integer
          example: 30
        type:
          type: string
          example: "class"
    SubjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "LS"
    UserCredentialsRequest:
      type: object
      required:
        - email
        - username
        - password
        - role
      properties:
        email:
          type: string
          example: "example@email.com"
        username:
          type: string
          example: "DefinitelyAUsername"
        password:
          type: string
          example: "thepasswordshouldcomehashed"
        role:
          $ref: "#/components/schemas/Role"
    UserUpdateRequest:
        type: object
        properties:
          username:
            type: string
            example: "I'veChangeMyUsername"
          image:
            type: string
            format: binary
    AssessRole:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user:
          $ref: "#/components/schemas/User"
        requestedRole:
          $ref: "#/components/schemas/Role"
        verificationToken:
          type: string
          example: "UUIDToken"
        verifiedBy:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
          example: "03-04-2025T12:00:00Z"
        expiresAt:
          type: string
          format: date-time
          example: "03-05-2025T12:00:00Z"
        status:
          $ref: "#/components/schemas/Status"
    ClassResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        subjectId:
          type: integer
          example: 1
        name:
          type: string
          example: "41D"
    IssueReportResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        roomId:
          type: integer
          example: 1
        description:
          type: string
          example: "There is a problem in room X"
    RoomResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "F.0.21"
        capacity:
          type: integer
          example: 30
    LectureResponse:
      type: object
      properties:
        schoolClass:
          $ref: "#/components/schemas/ClassResponse"
        room:
          $ref: "#/components/schemas/RoomResponse"
        type:
          $ref: "#/components/schemas/ClassType"
        weekDay:
          $ref: "#/components/schemas/WeekDay"
        startTime:
          type: string
          example: "11:00"
        endTime:
          type: string
          example: "13:00"
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "JWT"
    RegisterResponse:
      type: object
      properties:
        token:
          type: string
          example: "JWT"
    ScheduleResponse:
      type: object
      properties:
        lectures:
          type: array
          items:
            $ref: "#/components/schemas/LectureResponse"
    SubjectResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "LS"
    WelcomePageResponse:
      type: object
      properties:
        title:
          type: string
          example: "SIGMS"
        descriptions:
          type: string
          example: "The SIGMS API landing page"
        version:
          type: string
          example: "1.0.0"
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "example@email.com"
        username:
          type: string
          example: "YouWereMerelyGivenAnUsernameIWasBornIntoIt"
        profileImage:
          type: string
          format: binary
    Status:
      type: string
      enum:
        - PENDING
        - APPROVED
        - REJECTED
    WeekDay:
      type: string
      enum:
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
        - SUNDAY
    ClassType:
      type: string
      enum:
        - THEORETICAL,
        - PRACTICAL,
        - THEORETICAL_PRACTICAL,
    Role:
      type: string
      enum:
        - STUDENT
        - TEACHER
        - ADMIN
        - TECHNICIAN
  securitySchemes:
    bearerJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
